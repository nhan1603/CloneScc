version: "3.9"
services:
  database:
    container_name: scc-pg
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: scc-pg
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data
    networks:
      - scc
  migrate:
    image: migrate/migrate:v4.15.2
    profiles: [ "tools" ]
    volumes:
      - ./api/data/migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:postgres@database:5432/scc-pg?sslmode=disable",
      ]
    command: [ "up" ]
    depends_on:
      database:
        condition: service_healthy
    restart: on-failure
    networks:
      - scc
  zookeeper:
    container_name: scc-zookeeper
    networks:
      - scc
    image: confluentinc/cp-zookeeper:7.3.3
    ports:
      - "2181:2181"
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    container_name: scc-kafka
    networks:
      - scc
    image: confluentinc/cp-kafka:7.3.3
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: DOCKER://0.0.0.0:9092,LOCALHOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9092,LOCALHOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-topic:
    image: confluentinc/cp-kafka:7.3.3
    networks:
      - scc
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic scc.incident --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  server:
    container_name: scc-api
    networks:
      - scc
    ports:
      - "3001:3001"
    depends_on:
      - database
    build:
      context: .
      dockerfile: api.Dockerfile
    environment:
      DB_URL: postgres://postgres:postgres@database:5432/scc-pg?sslmode=disable
      KAFKA_BROKER: "kafka:9092"
      SCC_TOPIC: "scc.incident"
      FB_SA: "certs/fbsa.json"
      WEB_URL: "http://casestudy6f.s3corp.com.vn:3000"
      FILE_URL: "https://casestudy6f-file.s3corp.com.vn/"
      FTP_SERVER: "178.16.10.43"
      FTP_USER: "casestudy6f"
      FTP_PASSWORD: "casestudy6f@"
  simulator:
    container_name: scc-simulator
    build:
      context: .
      dockerfile: simulator.Dockerfile
    networks:
      - scc
    environment:
      DB_URL: postgres://postgres:postgres@database:5432/scc-pg?sslmode=disable
      KAFKA_BROKER: "kafka:9092"
      SCC_TOPIC: "scc.incident"
  mockery:
    container_name: mockery
    image: vektra/mockery:v2.20.0
    volumes:
      - ./api:/api
volumes:
  data:
networks:
  scc:
