// Code generated by mockery v2.20.0. DO NOT EDIT.

package requests

import (
	context "context"

	model "github.com/nhan1603/CloneScc/api/internal/model"
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gorilla/websocket"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// BroadCastResponse provides a mock function with given fields: _a0, ws
func (_m *MockController) BroadCastResponse(_a0 context.Context, ws *websocket.Conn) {
	_m.Called(_a0, ws)
}

// CreateRequest provides a mock function with given fields: ctx, input
func (_m *MockController) CreateRequest(ctx context.Context, input CreateRequestInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateRequestInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateResponse provides a mock function with given fields: ctx, input
func (_m *MockController) CreateResponse(ctx context.Context, input CreateResponseInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateResponseInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: _a0, _a1
func (_m *MockController) Detail(_a0 context.Context, _a1 int64) (model.RequestDetail, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.RequestDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.RequestDetail, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.RequestDetail); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.RequestDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockController) List(_a0 context.Context, _a1 model.GetRequestsInput) ([]model.RequestSummary, int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.RequestSummary
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRequestsInput) ([]model.RequestSummary, int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRequestsInput) []model.RequestSummary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RequestSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetRequestsInput) int64); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.GetRequestsInput) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Push provides a mock function with given fields: ctx, m
func (_m *MockController) Push(ctx context.Context, requestID int64) {
	_m.Called(ctx, requestID)
}

type mockConstructorTestingTNewMockController interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockController(t mockConstructorTestingTNewMockController) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
