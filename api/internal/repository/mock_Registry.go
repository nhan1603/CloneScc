// Code generated by mockery v2.20.0. DO NOT EDIT.

package repository

import (
	alert "github.com/nhan1603/CloneScc/api/internal/repository/alert"
	asset "github.com/nhan1603/CloneScc/api/internal/repository/asset"

	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/nhan1603/CloneScc/api/internal/repository/request"

	user "github.com/nhan1603/CloneScc/api/internal/repository/user"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

// Alert provides a mock function with given fields:
func (_m *MockRegistry) Alert() alert.Repository {
	ret := _m.Called()

	var r0 alert.Repository
	if rf, ok := ret.Get(0).(func() alert.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(alert.Repository)
		}
	}

	return r0
}

// Asset provides a mock function with given fields:
func (_m *MockRegistry) Asset() asset.Repository {
	ret := _m.Called()

	var r0 asset.Repository
	if rf, ok := ret.Get(0).(func() asset.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(asset.Repository)
		}
	}

	return r0
}

// DoInTx provides a mock function with given fields: ctx, txFunc
func (_m *MockRegistry) DoInTx(ctx context.Context, txFunc TxFunc) error {
	ret := _m.Called(ctx, txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, TxFunc) error); ok {
		r0 = rf(ctx, txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields:
func (_m *MockRegistry) Request() request.Repository {
	ret := _m.Called()

	var r0 request.Repository
	if rf, ok := ret.Get(0).(func() request.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(request.Repository)
		}
	}

	return r0
}

// User provides a mock function with given fields:
func (_m *MockRegistry) User() user.Repository {
	ret := _m.Called()

	var r0 user.Repository
	if rf, ok := ret.Get(0).(func() user.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Repository)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRegistry(t mockConstructorTestingTNewMockRegistry) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
