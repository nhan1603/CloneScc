// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Alert is an object representing the database table.
type Alert struct {
	ID             int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CCTVDeviceID   int64      `boil:"cctv_device_id" json:"cctv_device_id" toml:"cctv_device_id" yaml:"cctv_device_id"`
	Type           string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	Description    string     `boil:"description" json:"description" toml:"description" yaml:"description"`
	MediaData      types.JSON `boil:"media_data" json:"media_data" toml:"media_data" yaml:"media_data"`
	IsAcknowledged bool       `boil:"is_acknowledged" json:"is_acknowledged" toml:"is_acknowledged" yaml:"is_acknowledged"`
	IncidentAt     time.Time  `boil:"incident_at" json:"incident_at" toml:"incident_at" yaml:"incident_at"`
	CreatedAt      time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *alertR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L alertL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlertColumns = struct {
	ID             string
	CCTVDeviceID   string
	Type           string
	Description    string
	MediaData      string
	IsAcknowledged string
	IncidentAt     string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	CCTVDeviceID:   "cctv_device_id",
	Type:           "type",
	Description:    "description",
	MediaData:      "media_data",
	IsAcknowledged: "is_acknowledged",
	IncidentAt:     "incident_at",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var AlertTableColumns = struct {
	ID             string
	CCTVDeviceID   string
	Type           string
	Description    string
	MediaData      string
	IsAcknowledged string
	IncidentAt     string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "alerts.id",
	CCTVDeviceID:   "alerts.cctv_device_id",
	Type:           "alerts.type",
	Description:    "alerts.description",
	MediaData:      "alerts.media_data",
	IsAcknowledged: "alerts.is_acknowledged",
	IncidentAt:     "alerts.incident_at",
	CreatedAt:      "alerts.created_at",
	UpdatedAt:      "alerts.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AlertWhere = struct {
	ID             whereHelperint64
	CCTVDeviceID   whereHelperint64
	Type           whereHelperstring
	Description    whereHelperstring
	MediaData      whereHelpertypes_JSON
	IsAcknowledged whereHelperbool
	IncidentAt     whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"alerts\".\"id\""},
	CCTVDeviceID:   whereHelperint64{field: "\"alerts\".\"cctv_device_id\""},
	Type:           whereHelperstring{field: "\"alerts\".\"type\""},
	Description:    whereHelperstring{field: "\"alerts\".\"description\""},
	MediaData:      whereHelpertypes_JSON{field: "\"alerts\".\"media_data\""},
	IsAcknowledged: whereHelperbool{field: "\"alerts\".\"is_acknowledged\""},
	IncidentAt:     whereHelpertime_Time{field: "\"alerts\".\"incident_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"alerts\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"alerts\".\"updated_at\""},
}

// AlertRels is where relationship names are stored.
var AlertRels = struct {
	CCTVDevice           string
	VerificationRequests string
}{
	CCTVDevice:           "CCTVDevice",
	VerificationRequests: "VerificationRequests",
}

// alertR is where relationships are stored.
type alertR struct {
	CCTVDevice           *CCTVDevice              `boil:"CCTVDevice" json:"CCTVDevice" toml:"CCTVDevice" yaml:"CCTVDevice"`
	VerificationRequests VerificationRequestSlice `boil:"VerificationRequests" json:"VerificationRequests" toml:"VerificationRequests" yaml:"VerificationRequests"`
}

// NewStruct creates a new relationship struct
func (*alertR) NewStruct() *alertR {
	return &alertR{}
}

func (r *alertR) GetCCTVDevice() *CCTVDevice {
	if r == nil {
		return nil
	}
	return r.CCTVDevice
}

func (r *alertR) GetVerificationRequests() VerificationRequestSlice {
	if r == nil {
		return nil
	}
	return r.VerificationRequests
}

// alertL is where Load methods for each relationship are stored.
type alertL struct{}

var (
	alertAllColumns            = []string{"id", "cctv_device_id", "type", "description", "media_data", "is_acknowledged", "incident_at", "created_at", "updated_at"}
	alertColumnsWithoutDefault = []string{"id", "cctv_device_id", "type", "description", "media_data", "incident_at"}
	alertColumnsWithDefault    = []string{"is_acknowledged", "created_at", "updated_at"}
	alertPrimaryKeyColumns     = []string{"id"}
	alertGeneratedColumns      = []string{}
)

type (
	// AlertSlice is an alias for a slice of pointers to Alert.
	// This should almost always be used instead of []Alert.
	AlertSlice []*Alert

	alertQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	alertType                 = reflect.TypeOf(&Alert{})
	alertMapping              = queries.MakeStructMapping(alertType)
	alertPrimaryKeyMapping, _ = queries.BindMapping(alertType, alertMapping, alertPrimaryKeyColumns)
	alertInsertCacheMut       sync.RWMutex
	alertInsertCache          = make(map[string]insertCache)
	alertUpdateCacheMut       sync.RWMutex
	alertUpdateCache          = make(map[string]updateCache)
	alertUpsertCacheMut       sync.RWMutex
	alertUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single alert record from the query.
func (q alertQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Alert, error) {
	o := &Alert{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for alerts")
	}

	return o, nil
}

// All returns all Alert records from the query.
func (q alertQuery) All(ctx context.Context, exec boil.ContextExecutor) (AlertSlice, error) {
	var o []*Alert

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Alert slice")
	}

	return o, nil
}

// Count returns the count of all Alert records in the query.
func (q alertQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count alerts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q alertQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if alerts exists")
	}

	return count > 0, nil
}

// CCTVDevice pointed to by the foreign key.
func (o *Alert) CCTVDevice(mods ...qm.QueryMod) cctvDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CCTVDeviceID),
	}

	queryMods = append(queryMods, mods...)

	return CCTVDevices(queryMods...)
}

// VerificationRequests retrieves all the verification_request's VerificationRequests with an executor.
func (o *Alert) VerificationRequests(mods ...qm.QueryMod) verificationRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"verification_requests\".\"alert_id\"=?", o.ID),
	)

	return VerificationRequests(queryMods...)
}

// LoadCCTVDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (alertL) LoadCCTVDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlert interface{}, mods queries.Applicator) error {
	var slice []*Alert
	var object *Alert

	if singular {
		var ok bool
		object, ok = maybeAlert.(*Alert)
		if !ok {
			object = new(Alert)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAlert)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAlert))
			}
		}
	} else {
		s, ok := maybeAlert.(*[]*Alert)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAlert)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAlert))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &alertR{}
		}
		args = append(args, object.CCTVDeviceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &alertR{}
			}

			for _, a := range args {
				if a == obj.CCTVDeviceID {
					continue Outer
				}
			}

			args = append(args, obj.CCTVDeviceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cctv_devices`),
		qm.WhereIn(`cctv_devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CCTVDevice")
	}

	var resultSlice []*CCTVDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CCTVDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cctv_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cctv_devices")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CCTVDevice = foreign
		if foreign.R == nil {
			foreign.R = &cctvDeviceR{}
		}
		foreign.R.Alerts = append(foreign.R.Alerts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CCTVDeviceID == foreign.ID {
				local.R.CCTVDevice = foreign
				if foreign.R == nil {
					foreign.R = &cctvDeviceR{}
				}
				foreign.R.Alerts = append(foreign.R.Alerts, local)
				break
			}
		}
	}

	return nil
}

// LoadVerificationRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (alertL) LoadVerificationRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlert interface{}, mods queries.Applicator) error {
	var slice []*Alert
	var object *Alert

	if singular {
		var ok bool
		object, ok = maybeAlert.(*Alert)
		if !ok {
			object = new(Alert)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAlert)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAlert))
			}
		}
	} else {
		s, ok := maybeAlert.(*[]*Alert)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAlert)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAlert))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &alertR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &alertR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`verification_requests`),
		qm.WhereIn(`verification_requests.alert_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load verification_requests")
	}

	var resultSlice []*VerificationRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice verification_requests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on verification_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verification_requests")
	}

	if singular {
		object.R.VerificationRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &verificationRequestR{}
			}
			foreign.R.Alert = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AlertID {
				local.R.VerificationRequests = append(local.R.VerificationRequests, foreign)
				if foreign.R == nil {
					foreign.R = &verificationRequestR{}
				}
				foreign.R.Alert = local
				break
			}
		}
	}

	return nil
}

// SetCCTVDevice of the alert to the related item.
// Sets o.R.CCTVDevice to related.
// Adds o to related.R.Alerts.
func (o *Alert) SetCCTVDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CCTVDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cctv_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, alertPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CCTVDeviceID = related.ID
	if o.R == nil {
		o.R = &alertR{
			CCTVDevice: related,
		}
	} else {
		o.R.CCTVDevice = related
	}

	if related.R == nil {
		related.R = &cctvDeviceR{
			Alerts: AlertSlice{o},
		}
	} else {
		related.R.Alerts = append(related.R.Alerts, o)
	}

	return nil
}

// AddVerificationRequests adds the given related objects to the existing relationships
// of the alert, optionally inserting them as new records.
// Appends related to o.R.VerificationRequests.
// Sets related.R.Alert appropriately.
func (o *Alert) AddVerificationRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerificationRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AlertID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"verification_requests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"alert_id"}),
				strmangle.WhereClause("\"", "\"", 2, verificationRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AlertID = o.ID
		}
	}

	if o.R == nil {
		o.R = &alertR{
			VerificationRequests: related,
		}
	} else {
		o.R.VerificationRequests = append(o.R.VerificationRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &verificationRequestR{
				Alert: o,
			}
		} else {
			rel.R.Alert = o
		}
	}
	return nil
}

// Alerts retrieves all the records using an executor.
func Alerts(mods ...qm.QueryMod) alertQuery {
	mods = append(mods, qm.From("\"alerts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alerts\".*"})
	}

	return alertQuery{q}
}

// FindAlert retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlert(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Alert, error) {
	alertObj := &Alert{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alerts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, alertObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from alerts")
	}

	return alertObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Alert) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no alerts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(alertColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	alertInsertCacheMut.RLock()
	cache, cached := alertInsertCache[key]
	alertInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			alertAllColumns,
			alertColumnsWithDefault,
			alertColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(alertType, alertMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(alertType, alertMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alerts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alerts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into alerts")
	}

	if !cached {
		alertInsertCacheMut.Lock()
		alertInsertCache[key] = cache
		alertInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Alert.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Alert) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	alertUpdateCacheMut.RLock()
	cache, cached := alertUpdateCache[key]
	alertUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			alertAllColumns,
			alertPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update alerts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alerts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, alertPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(alertType, alertMapping, append(wl, alertPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update alerts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for alerts")
	}

	if !cached {
		alertUpdateCacheMut.Lock()
		alertUpdateCache[key] = cache
		alertUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q alertQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for alerts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlertSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alerts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, alertPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in alert slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all alert")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Alert) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no alerts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(alertColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	alertUpsertCacheMut.RLock()
	cache, cached := alertUpsertCache[key]
	alertUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			alertAllColumns,
			alertColumnsWithDefault,
			alertColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			alertAllColumns,
			alertPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert alerts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(alertPrimaryKeyColumns))
			copy(conflict, alertPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alerts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(alertType, alertMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(alertType, alertMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert alerts")
	}

	if !cached {
		alertUpsertCacheMut.Lock()
		alertUpsertCache[key] = cache
		alertUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Alert record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Alert) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Alert provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), alertPrimaryKeyMapping)
	sql := "DELETE FROM \"alerts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for alerts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q alertQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no alertQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from alerts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for alerts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlertSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alerts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, alertPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from alert slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for alerts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Alert) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAlert(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlertSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlertSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alertPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alerts\".* FROM \"alerts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, alertPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in AlertSlice")
	}

	*o = slice

	return nil
}

// AlertExists checks if the Alert row exists.
func AlertExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alerts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if alerts exists")
	}

	return exists, nil
}

// Exists checks if the Alert row exists.
func (o *Alert) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AlertExists(ctx, exec, o.ID)
}
