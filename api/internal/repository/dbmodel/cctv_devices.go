// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CCTVDevice is an object representing the database table.
type CCTVDevice struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PremiseID   int64     `boil:"premise_id" json:"premise_id" toml:"premise_id" yaml:"premise_id"`
	DeviceName  string    `boil:"device_name" json:"device_name" toml:"device_name" yaml:"device_name"`
	DeviceCode  string    `boil:"device_code" json:"device_code" toml:"device_code" yaml:"device_code"`
	IsActive    bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	FloorNumber null.Int  `boil:"floor_number" json:"floor_number,omitempty" toml:"floor_number" yaml:"floor_number,omitempty"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *cctvDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cctvDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CCTVDeviceColumns = struct {
	ID          string
	PremiseID   string
	DeviceName  string
	DeviceCode  string
	IsActive    string
	FloorNumber string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	PremiseID:   "premise_id",
	DeviceName:  "device_name",
	DeviceCode:  "device_code",
	IsActive:    "is_active",
	FloorNumber: "floor_number",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var CCTVDeviceTableColumns = struct {
	ID          string
	PremiseID   string
	DeviceName  string
	DeviceCode  string
	IsActive    string
	FloorNumber string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "cctv_devices.id",
	PremiseID:   "cctv_devices.premise_id",
	DeviceName:  "cctv_devices.device_name",
	DeviceCode:  "cctv_devices.device_code",
	IsActive:    "cctv_devices.is_active",
	FloorNumber: "cctv_devices.floor_number",
	CreatedAt:   "cctv_devices.created_at",
	UpdatedAt:   "cctv_devices.updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CCTVDeviceWhere = struct {
	ID          whereHelperint64
	PremiseID   whereHelperint64
	DeviceName  whereHelperstring
	DeviceCode  whereHelperstring
	IsActive    whereHelperbool
	FloorNumber whereHelpernull_Int
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"cctv_devices\".\"id\""},
	PremiseID:   whereHelperint64{field: "\"cctv_devices\".\"premise_id\""},
	DeviceName:  whereHelperstring{field: "\"cctv_devices\".\"device_name\""},
	DeviceCode:  whereHelperstring{field: "\"cctv_devices\".\"device_code\""},
	IsActive:    whereHelperbool{field: "\"cctv_devices\".\"is_active\""},
	FloorNumber: whereHelpernull_Int{field: "\"cctv_devices\".\"floor_number\""},
	CreatedAt:   whereHelpertime_Time{field: "\"cctv_devices\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"cctv_devices\".\"updated_at\""},
}

// CCTVDeviceRels is where relationship names are stored.
var CCTVDeviceRels = struct {
	Premise string
	Alerts  string
}{
	Premise: "Premise",
	Alerts:  "Alerts",
}

// cctvDeviceR is where relationships are stored.
type cctvDeviceR struct {
	Premise *Premise   `boil:"Premise" json:"Premise" toml:"Premise" yaml:"Premise"`
	Alerts  AlertSlice `boil:"Alerts" json:"Alerts" toml:"Alerts" yaml:"Alerts"`
}

// NewStruct creates a new relationship struct
func (*cctvDeviceR) NewStruct() *cctvDeviceR {
	return &cctvDeviceR{}
}

func (r *cctvDeviceR) GetPremise() *Premise {
	if r == nil {
		return nil
	}
	return r.Premise
}

func (r *cctvDeviceR) GetAlerts() AlertSlice {
	if r == nil {
		return nil
	}
	return r.Alerts
}

// cctvDeviceL is where Load methods for each relationship are stored.
type cctvDeviceL struct{}

var (
	cctvDeviceAllColumns            = []string{"id", "premise_id", "device_name", "device_code", "is_active", "floor_number", "created_at", "updated_at"}
	cctvDeviceColumnsWithoutDefault = []string{"id", "premise_id", "device_name", "device_code"}
	cctvDeviceColumnsWithDefault    = []string{"is_active", "floor_number", "created_at", "updated_at"}
	cctvDevicePrimaryKeyColumns     = []string{"id"}
	cctvDeviceGeneratedColumns      = []string{}
)

type (
	// CCTVDeviceSlice is an alias for a slice of pointers to CCTVDevice.
	// This should almost always be used instead of []CCTVDevice.
	CCTVDeviceSlice []*CCTVDevice

	cctvDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cctvDeviceType                 = reflect.TypeOf(&CCTVDevice{})
	cctvDeviceMapping              = queries.MakeStructMapping(cctvDeviceType)
	cctvDevicePrimaryKeyMapping, _ = queries.BindMapping(cctvDeviceType, cctvDeviceMapping, cctvDevicePrimaryKeyColumns)
	cctvDeviceInsertCacheMut       sync.RWMutex
	cctvDeviceInsertCache          = make(map[string]insertCache)
	cctvDeviceUpdateCacheMut       sync.RWMutex
	cctvDeviceUpdateCache          = make(map[string]updateCache)
	cctvDeviceUpsertCacheMut       sync.RWMutex
	cctvDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single cctvDevice record from the query.
func (q cctvDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CCTVDevice, error) {
	o := &CCTVDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for cctv_devices")
	}

	return o, nil
}

// All returns all CCTVDevice records from the query.
func (q cctvDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (CCTVDeviceSlice, error) {
	var o []*CCTVDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to CCTVDevice slice")
	}

	return o, nil
}

// Count returns the count of all CCTVDevice records in the query.
func (q cctvDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count cctv_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cctvDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if cctv_devices exists")
	}

	return count > 0, nil
}

// Premise pointed to by the foreign key.
func (o *CCTVDevice) Premise(mods ...qm.QueryMod) premiseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PremiseID),
	}

	queryMods = append(queryMods, mods...)

	return Premises(queryMods...)
}

// Alerts retrieves all the alert's Alerts with an executor.
func (o *CCTVDevice) Alerts(mods ...qm.QueryMod) alertQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"alerts\".\"cctv_device_id\"=?", o.ID),
	)

	return Alerts(queryMods...)
}

// LoadPremise allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cctvDeviceL) LoadPremise(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCCTVDevice interface{}, mods queries.Applicator) error {
	var slice []*CCTVDevice
	var object *CCTVDevice

	if singular {
		var ok bool
		object, ok = maybeCCTVDevice.(*CCTVDevice)
		if !ok {
			object = new(CCTVDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCCTVDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCCTVDevice))
			}
		}
	} else {
		s, ok := maybeCCTVDevice.(*[]*CCTVDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCCTVDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCCTVDevice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cctvDeviceR{}
		}
		args = append(args, object.PremiseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cctvDeviceR{}
			}

			for _, a := range args {
				if a == obj.PremiseID {
					continue Outer
				}
			}

			args = append(args, obj.PremiseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`premises`),
		qm.WhereIn(`premises.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Premise")
	}

	var resultSlice []*Premise
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Premise")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for premises")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for premises")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Premise = foreign
		if foreign.R == nil {
			foreign.R = &premiseR{}
		}
		foreign.R.CCTVDevices = append(foreign.R.CCTVDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PremiseID == foreign.ID {
				local.R.Premise = foreign
				if foreign.R == nil {
					foreign.R = &premiseR{}
				}
				foreign.R.CCTVDevices = append(foreign.R.CCTVDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadAlerts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cctvDeviceL) LoadAlerts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCCTVDevice interface{}, mods queries.Applicator) error {
	var slice []*CCTVDevice
	var object *CCTVDevice

	if singular {
		var ok bool
		object, ok = maybeCCTVDevice.(*CCTVDevice)
		if !ok {
			object = new(CCTVDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCCTVDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCCTVDevice))
			}
		}
	} else {
		s, ok := maybeCCTVDevice.(*[]*CCTVDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCCTVDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCCTVDevice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cctvDeviceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cctvDeviceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alerts`),
		qm.WhereIn(`alerts.cctv_device_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load alerts")
	}

	var resultSlice []*Alert
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice alerts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on alerts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for alerts")
	}

	if singular {
		object.R.Alerts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &alertR{}
			}
			foreign.R.CCTVDevice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CCTVDeviceID {
				local.R.Alerts = append(local.R.Alerts, foreign)
				if foreign.R == nil {
					foreign.R = &alertR{}
				}
				foreign.R.CCTVDevice = local
				break
			}
		}
	}

	return nil
}

// SetPremise of the cctvDevice to the related item.
// Sets o.R.Premise to related.
// Adds o to related.R.CCTVDevices.
func (o *CCTVDevice) SetPremise(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Premise) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cctv_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"premise_id"}),
		strmangle.WhereClause("\"", "\"", 2, cctvDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PremiseID = related.ID
	if o.R == nil {
		o.R = &cctvDeviceR{
			Premise: related,
		}
	} else {
		o.R.Premise = related
	}

	if related.R == nil {
		related.R = &premiseR{
			CCTVDevices: CCTVDeviceSlice{o},
		}
	} else {
		related.R.CCTVDevices = append(related.R.CCTVDevices, o)
	}

	return nil
}

// AddAlerts adds the given related objects to the existing relationships
// of the cctv_device, optionally inserting them as new records.
// Appends related to o.R.Alerts.
// Sets related.R.CCTVDevice appropriately.
func (o *CCTVDevice) AddAlerts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Alert) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CCTVDeviceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"alerts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"cctv_device_id"}),
				strmangle.WhereClause("\"", "\"", 2, alertPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CCTVDeviceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &cctvDeviceR{
			Alerts: related,
		}
	} else {
		o.R.Alerts = append(o.R.Alerts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &alertR{
				CCTVDevice: o,
			}
		} else {
			rel.R.CCTVDevice = o
		}
	}
	return nil
}

// CCTVDevices retrieves all the records using an executor.
func CCTVDevices(mods ...qm.QueryMod) cctvDeviceQuery {
	mods = append(mods, qm.From("\"cctv_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cctv_devices\".*"})
	}

	return cctvDeviceQuery{q}
}

// FindCCTVDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCCTVDevice(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CCTVDevice, error) {
	cctvDeviceObj := &CCTVDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cctv_devices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cctvDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from cctv_devices")
	}

	return cctvDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CCTVDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no cctv_devices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(cctvDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cctvDeviceInsertCacheMut.RLock()
	cache, cached := cctvDeviceInsertCache[key]
	cctvDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cctvDeviceAllColumns,
			cctvDeviceColumnsWithDefault,
			cctvDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cctvDeviceType, cctvDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cctvDeviceType, cctvDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cctv_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cctv_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into cctv_devices")
	}

	if !cached {
		cctvDeviceInsertCacheMut.Lock()
		cctvDeviceInsertCache[key] = cache
		cctvDeviceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CCTVDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CCTVDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	cctvDeviceUpdateCacheMut.RLock()
	cache, cached := cctvDeviceUpdateCache[key]
	cctvDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cctvDeviceAllColumns,
			cctvDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update cctv_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cctv_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cctvDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cctvDeviceType, cctvDeviceMapping, append(wl, cctvDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update cctv_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for cctv_devices")
	}

	if !cached {
		cctvDeviceUpdateCacheMut.Lock()
		cctvDeviceUpdateCache[key] = cache
		cctvDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q cctvDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for cctv_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for cctv_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CCTVDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cctvDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cctv_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cctvDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in cctvDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all cctvDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CCTVDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no cctv_devices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(cctvDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cctvDeviceUpsertCacheMut.RLock()
	cache, cached := cctvDeviceUpsertCache[key]
	cctvDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cctvDeviceAllColumns,
			cctvDeviceColumnsWithDefault,
			cctvDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cctvDeviceAllColumns,
			cctvDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert cctv_devices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cctvDevicePrimaryKeyColumns))
			copy(conflict, cctvDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cctv_devices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cctvDeviceType, cctvDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cctvDeviceType, cctvDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert cctv_devices")
	}

	if !cached {
		cctvDeviceUpsertCacheMut.Lock()
		cctvDeviceUpsertCache[key] = cache
		cctvDeviceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CCTVDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CCTVDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no CCTVDevice provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cctvDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"cctv_devices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from cctv_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for cctv_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cctvDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no cctvDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from cctv_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for cctv_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CCTVDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cctvDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cctv_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cctvDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from cctvDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for cctv_devices")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CCTVDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCCTVDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CCTVDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CCTVDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cctvDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cctv_devices\".* FROM \"cctv_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cctvDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in CCTVDeviceSlice")
	}

	*o = slice

	return nil
}

// CCTVDeviceExists checks if the CCTVDevice row exists.
func CCTVDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cctv_devices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if cctv_devices exists")
	}

	return exists, nil
}

// Exists checks if the CCTVDevice row exists.
func (o *CCTVDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CCTVDeviceExists(ctx, exec, o.ID)
}
