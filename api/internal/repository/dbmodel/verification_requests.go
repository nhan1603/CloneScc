// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VerificationRequest is an object representing the database table.
type VerificationRequest struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AlertID        int64       `boil:"alert_id" json:"alert_id" toml:"alert_id" yaml:"alert_id"`
	RequestBy      int64       `boil:"request_by" json:"request_by" toml:"request_by" yaml:"request_by"`
	AssignedUserID int64       `boil:"assigned_user_id" json:"assigned_user_id" toml:"assigned_user_id" yaml:"assigned_user_id"`
	Status         string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Message        null.String `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	StartTime      time.Time   `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime        null.Time   `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *verificationRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L verificationRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VerificationRequestColumns = struct {
	ID             string
	AlertID        string
	RequestBy      string
	AssignedUserID string
	Status         string
	Message        string
	StartTime      string
	EndTime        string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	AlertID:        "alert_id",
	RequestBy:      "request_by",
	AssignedUserID: "assigned_user_id",
	Status:         "status",
	Message:        "message",
	StartTime:      "start_time",
	EndTime:        "end_time",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var VerificationRequestTableColumns = struct {
	ID             string
	AlertID        string
	RequestBy      string
	AssignedUserID string
	Status         string
	Message        string
	StartTime      string
	EndTime        string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "verification_requests.id",
	AlertID:        "verification_requests.alert_id",
	RequestBy:      "verification_requests.request_by",
	AssignedUserID: "verification_requests.assigned_user_id",
	Status:         "verification_requests.status",
	Message:        "verification_requests.message",
	StartTime:      "verification_requests.start_time",
	EndTime:        "verification_requests.end_time",
	CreatedAt:      "verification_requests.created_at",
	UpdatedAt:      "verification_requests.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VerificationRequestWhere = struct {
	ID             whereHelperint64
	AlertID        whereHelperint64
	RequestBy      whereHelperint64
	AssignedUserID whereHelperint64
	Status         whereHelperstring
	Message        whereHelpernull_String
	StartTime      whereHelpertime_Time
	EndTime        whereHelpernull_Time
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"verification_requests\".\"id\""},
	AlertID:        whereHelperint64{field: "\"verification_requests\".\"alert_id\""},
	RequestBy:      whereHelperint64{field: "\"verification_requests\".\"request_by\""},
	AssignedUserID: whereHelperint64{field: "\"verification_requests\".\"assigned_user_id\""},
	Status:         whereHelperstring{field: "\"verification_requests\".\"status\""},
	Message:        whereHelpernull_String{field: "\"verification_requests\".\"message\""},
	StartTime:      whereHelpertime_Time{field: "\"verification_requests\".\"start_time\""},
	EndTime:        whereHelpernull_Time{field: "\"verification_requests\".\"end_time\""},
	CreatedAt:      whereHelpertime_Time{field: "\"verification_requests\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"verification_requests\".\"updated_at\""},
}

// VerificationRequestRels is where relationship names are stored.
var VerificationRequestRels = struct {
	Alert                        string
	RequestByUser                string
	AssignedUser                 string
	VerificationRequestResponses string
}{
	Alert:                        "Alert",
	RequestByUser:                "RequestByUser",
	AssignedUser:                 "AssignedUser",
	VerificationRequestResponses: "VerificationRequestResponses",
}

// verificationRequestR is where relationships are stored.
type verificationRequestR struct {
	Alert                        *Alert                           `boil:"Alert" json:"Alert" toml:"Alert" yaml:"Alert"`
	RequestByUser                *User                            `boil:"RequestByUser" json:"RequestByUser" toml:"RequestByUser" yaml:"RequestByUser"`
	AssignedUser                 *User                            `boil:"AssignedUser" json:"AssignedUser" toml:"AssignedUser" yaml:"AssignedUser"`
	VerificationRequestResponses VerificationRequestResponseSlice `boil:"VerificationRequestResponses" json:"VerificationRequestResponses" toml:"VerificationRequestResponses" yaml:"VerificationRequestResponses"`
}

// NewStruct creates a new relationship struct
func (*verificationRequestR) NewStruct() *verificationRequestR {
	return &verificationRequestR{}
}

func (r *verificationRequestR) GetAlert() *Alert {
	if r == nil {
		return nil
	}
	return r.Alert
}

func (r *verificationRequestR) GetRequestByUser() *User {
	if r == nil {
		return nil
	}
	return r.RequestByUser
}

func (r *verificationRequestR) GetAssignedUser() *User {
	if r == nil {
		return nil
	}
	return r.AssignedUser
}

func (r *verificationRequestR) GetVerificationRequestResponses() VerificationRequestResponseSlice {
	if r == nil {
		return nil
	}
	return r.VerificationRequestResponses
}

// verificationRequestL is where Load methods for each relationship are stored.
type verificationRequestL struct{}

var (
	verificationRequestAllColumns            = []string{"id", "alert_id", "request_by", "assigned_user_id", "status", "message", "start_time", "end_time", "created_at", "updated_at"}
	verificationRequestColumnsWithoutDefault = []string{"id", "alert_id", "request_by", "assigned_user_id", "status", "start_time"}
	verificationRequestColumnsWithDefault    = []string{"message", "end_time", "created_at", "updated_at"}
	verificationRequestPrimaryKeyColumns     = []string{"id"}
	verificationRequestGeneratedColumns      = []string{}
)

type (
	// VerificationRequestSlice is an alias for a slice of pointers to VerificationRequest.
	// This should almost always be used instead of []VerificationRequest.
	VerificationRequestSlice []*VerificationRequest

	verificationRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	verificationRequestType                 = reflect.TypeOf(&VerificationRequest{})
	verificationRequestMapping              = queries.MakeStructMapping(verificationRequestType)
	verificationRequestPrimaryKeyMapping, _ = queries.BindMapping(verificationRequestType, verificationRequestMapping, verificationRequestPrimaryKeyColumns)
	verificationRequestInsertCacheMut       sync.RWMutex
	verificationRequestInsertCache          = make(map[string]insertCache)
	verificationRequestUpdateCacheMut       sync.RWMutex
	verificationRequestUpdateCache          = make(map[string]updateCache)
	verificationRequestUpsertCacheMut       sync.RWMutex
	verificationRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single verificationRequest record from the query.
func (q verificationRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VerificationRequest, error) {
	o := &VerificationRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for verification_requests")
	}

	return o, nil
}

// All returns all VerificationRequest records from the query.
func (q verificationRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (VerificationRequestSlice, error) {
	var o []*VerificationRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to VerificationRequest slice")
	}

	return o, nil
}

// Count returns the count of all VerificationRequest records in the query.
func (q verificationRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count verification_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q verificationRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if verification_requests exists")
	}

	return count > 0, nil
}

// Alert pointed to by the foreign key.
func (o *VerificationRequest) Alert(mods ...qm.QueryMod) alertQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AlertID),
	}

	queryMods = append(queryMods, mods...)

	return Alerts(queryMods...)
}

// RequestByUser pointed to by the foreign key.
func (o *VerificationRequest) RequestByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequestBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// AssignedUser pointed to by the foreign key.
func (o *VerificationRequest) AssignedUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignedUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// VerificationRequestResponses retrieves all the verification_request_response's VerificationRequestResponses with an executor.
func (o *VerificationRequest) VerificationRequestResponses(mods ...qm.QueryMod) verificationRequestResponseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"verification_request_responses\".\"verification_request_id\"=?", o.ID),
	)

	return VerificationRequestResponses(queryMods...)
}

// LoadAlert allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (verificationRequestL) LoadAlert(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerificationRequest interface{}, mods queries.Applicator) error {
	var slice []*VerificationRequest
	var object *VerificationRequest

	if singular {
		var ok bool
		object, ok = maybeVerificationRequest.(*VerificationRequest)
		if !ok {
			object = new(VerificationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerificationRequest))
			}
		}
	} else {
		s, ok := maybeVerificationRequest.(*[]*VerificationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerificationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &verificationRequestR{}
		}
		args = append(args, object.AlertID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verificationRequestR{}
			}

			for _, a := range args {
				if a == obj.AlertID {
					continue Outer
				}
			}

			args = append(args, obj.AlertID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`alerts`),
		qm.WhereIn(`alerts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Alert")
	}

	var resultSlice []*Alert
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Alert")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for alerts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for alerts")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Alert = foreign
		if foreign.R == nil {
			foreign.R = &alertR{}
		}
		foreign.R.VerificationRequests = append(foreign.R.VerificationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AlertID == foreign.ID {
				local.R.Alert = foreign
				if foreign.R == nil {
					foreign.R = &alertR{}
				}
				foreign.R.VerificationRequests = append(foreign.R.VerificationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadRequestByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (verificationRequestL) LoadRequestByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerificationRequest interface{}, mods queries.Applicator) error {
	var slice []*VerificationRequest
	var object *VerificationRequest

	if singular {
		var ok bool
		object, ok = maybeVerificationRequest.(*VerificationRequest)
		if !ok {
			object = new(VerificationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerificationRequest))
			}
		}
	} else {
		s, ok := maybeVerificationRequest.(*[]*VerificationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerificationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &verificationRequestR{}
		}
		args = append(args, object.RequestBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verificationRequestR{}
			}

			for _, a := range args {
				if a == obj.RequestBy {
					continue Outer
				}
			}

			args = append(args, obj.RequestBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RequestByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RequestByVerificationRequests = append(foreign.R.RequestByVerificationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequestBy == foreign.ID {
				local.R.RequestByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RequestByVerificationRequests = append(foreign.R.RequestByVerificationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignedUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (verificationRequestL) LoadAssignedUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerificationRequest interface{}, mods queries.Applicator) error {
	var slice []*VerificationRequest
	var object *VerificationRequest

	if singular {
		var ok bool
		object, ok = maybeVerificationRequest.(*VerificationRequest)
		if !ok {
			object = new(VerificationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerificationRequest))
			}
		}
	} else {
		s, ok := maybeVerificationRequest.(*[]*VerificationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerificationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &verificationRequestR{}
		}
		args = append(args, object.AssignedUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verificationRequestR{}
			}

			for _, a := range args {
				if a == obj.AssignedUserID {
					continue Outer
				}
			}

			args = append(args, obj.AssignedUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssignedUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AssignedUserVerificationRequests = append(foreign.R.AssignedUserVerificationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssignedUserID == foreign.ID {
				local.R.AssignedUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AssignedUserVerificationRequests = append(foreign.R.AssignedUserVerificationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadVerificationRequestResponses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (verificationRequestL) LoadVerificationRequestResponses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerificationRequest interface{}, mods queries.Applicator) error {
	var slice []*VerificationRequest
	var object *VerificationRequest

	if singular {
		var ok bool
		object, ok = maybeVerificationRequest.(*VerificationRequest)
		if !ok {
			object = new(VerificationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerificationRequest))
			}
		}
	} else {
		s, ok := maybeVerificationRequest.(*[]*VerificationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerificationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerificationRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &verificationRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verificationRequestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`verification_request_responses`),
		qm.WhereIn(`verification_request_responses.verification_request_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load verification_request_responses")
	}

	var resultSlice []*VerificationRequestResponse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice verification_request_responses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on verification_request_responses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verification_request_responses")
	}

	if singular {
		object.R.VerificationRequestResponses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &verificationRequestResponseR{}
			}
			foreign.R.VerificationRequest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VerificationRequestID {
				local.R.VerificationRequestResponses = append(local.R.VerificationRequestResponses, foreign)
				if foreign.R == nil {
					foreign.R = &verificationRequestResponseR{}
				}
				foreign.R.VerificationRequest = local
				break
			}
		}
	}

	return nil
}

// SetAlert of the verificationRequest to the related item.
// Sets o.R.Alert to related.
// Adds o to related.R.VerificationRequests.
func (o *VerificationRequest) SetAlert(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Alert) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"verification_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"alert_id"}),
		strmangle.WhereClause("\"", "\"", 2, verificationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AlertID = related.ID
	if o.R == nil {
		o.R = &verificationRequestR{
			Alert: related,
		}
	} else {
		o.R.Alert = related
	}

	if related.R == nil {
		related.R = &alertR{
			VerificationRequests: VerificationRequestSlice{o},
		}
	} else {
		related.R.VerificationRequests = append(related.R.VerificationRequests, o)
	}

	return nil
}

// SetRequestByUser of the verificationRequest to the related item.
// Sets o.R.RequestByUser to related.
// Adds o to related.R.RequestByVerificationRequests.
func (o *VerificationRequest) SetRequestByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"verification_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"request_by"}),
		strmangle.WhereClause("\"", "\"", 2, verificationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequestBy = related.ID
	if o.R == nil {
		o.R = &verificationRequestR{
			RequestByUser: related,
		}
	} else {
		o.R.RequestByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			RequestByVerificationRequests: VerificationRequestSlice{o},
		}
	} else {
		related.R.RequestByVerificationRequests = append(related.R.RequestByVerificationRequests, o)
	}

	return nil
}

// SetAssignedUser of the verificationRequest to the related item.
// Sets o.R.AssignedUser to related.
// Adds o to related.R.AssignedUserVerificationRequests.
func (o *VerificationRequest) SetAssignedUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"verification_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, verificationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssignedUserID = related.ID
	if o.R == nil {
		o.R = &verificationRequestR{
			AssignedUser: related,
		}
	} else {
		o.R.AssignedUser = related
	}

	if related.R == nil {
		related.R = &userR{
			AssignedUserVerificationRequests: VerificationRequestSlice{o},
		}
	} else {
		related.R.AssignedUserVerificationRequests = append(related.R.AssignedUserVerificationRequests, o)
	}

	return nil
}

// AddVerificationRequestResponses adds the given related objects to the existing relationships
// of the verification_request, optionally inserting them as new records.
// Appends related to o.R.VerificationRequestResponses.
// Sets related.R.VerificationRequest appropriately.
func (o *VerificationRequest) AddVerificationRequestResponses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerificationRequestResponse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VerificationRequestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"verification_request_responses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"verification_request_id"}),
				strmangle.WhereClause("\"", "\"", 2, verificationRequestResponsePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VerificationRequestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &verificationRequestR{
			VerificationRequestResponses: related,
		}
	} else {
		o.R.VerificationRequestResponses = append(o.R.VerificationRequestResponses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &verificationRequestResponseR{
				VerificationRequest: o,
			}
		} else {
			rel.R.VerificationRequest = o
		}
	}
	return nil
}

// VerificationRequests retrieves all the records using an executor.
func VerificationRequests(mods ...qm.QueryMod) verificationRequestQuery {
	mods = append(mods, qm.From("\"verification_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"verification_requests\".*"})
	}

	return verificationRequestQuery{q}
}

// FindVerificationRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVerificationRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*VerificationRequest, error) {
	verificationRequestObj := &VerificationRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"verification_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, verificationRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from verification_requests")
	}

	return verificationRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VerificationRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no verification_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(verificationRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	verificationRequestInsertCacheMut.RLock()
	cache, cached := verificationRequestInsertCache[key]
	verificationRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			verificationRequestAllColumns,
			verificationRequestColumnsWithDefault,
			verificationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(verificationRequestType, verificationRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(verificationRequestType, verificationRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"verification_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"verification_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into verification_requests")
	}

	if !cached {
		verificationRequestInsertCacheMut.Lock()
		verificationRequestInsertCache[key] = cache
		verificationRequestInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VerificationRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VerificationRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	verificationRequestUpdateCacheMut.RLock()
	cache, cached := verificationRequestUpdateCache[key]
	verificationRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			verificationRequestAllColumns,
			verificationRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update verification_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"verification_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, verificationRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(verificationRequestType, verificationRequestMapping, append(wl, verificationRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update verification_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for verification_requests")
	}

	if !cached {
		verificationRequestUpdateCacheMut.Lock()
		verificationRequestUpdateCache[key] = cache
		verificationRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q verificationRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for verification_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for verification_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VerificationRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verificationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"verification_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, verificationRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in verificationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all verificationRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VerificationRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no verification_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(verificationRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	verificationRequestUpsertCacheMut.RLock()
	cache, cached := verificationRequestUpsertCache[key]
	verificationRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			verificationRequestAllColumns,
			verificationRequestColumnsWithDefault,
			verificationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			verificationRequestAllColumns,
			verificationRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert verification_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(verificationRequestPrimaryKeyColumns))
			copy(conflict, verificationRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"verification_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(verificationRequestType, verificationRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(verificationRequestType, verificationRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert verification_requests")
	}

	if !cached {
		verificationRequestUpsertCacheMut.Lock()
		verificationRequestUpsertCache[key] = cache
		verificationRequestUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VerificationRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VerificationRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no VerificationRequest provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), verificationRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"verification_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from verification_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for verification_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q verificationRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no verificationRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from verification_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for verification_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VerificationRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verificationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"verification_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, verificationRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from verificationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for verification_requests")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VerificationRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVerificationRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VerificationRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VerificationRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verificationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"verification_requests\".* FROM \"verification_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, verificationRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in VerificationRequestSlice")
	}

	*o = slice

	return nil
}

// VerificationRequestExists checks if the VerificationRequest row exists.
func VerificationRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"verification_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if verification_requests exists")
	}

	return exists, nil
}

// Exists checks if the VerificationRequest row exists.
func (o *VerificationRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VerificationRequestExists(ctx, exec, o.ID)
}
