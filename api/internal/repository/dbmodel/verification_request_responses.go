// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VerificationRequestResponse is an object representing the database table.
type VerificationRequestResponse struct {
	ID                    int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	VerificationRequestID int64     `boil:"verification_request_id" json:"verification_request_id" toml:"verification_request_id" yaml:"verification_request_id"`
	Message               string    `boil:"message" json:"message" toml:"message" yaml:"message"`
	MediaData             null.JSON `boil:"media_data" json:"media_data,omitempty" toml:"media_data" yaml:"media_data,omitempty"`
	VerifiedAt            time.Time `boil:"verified_at" json:"verified_at" toml:"verified_at" yaml:"verified_at"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *verificationRequestResponseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L verificationRequestResponseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VerificationRequestResponseColumns = struct {
	ID                    string
	VerificationRequestID string
	Message               string
	MediaData             string
	VerifiedAt            string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	VerificationRequestID: "verification_request_id",
	Message:               "message",
	MediaData:             "media_data",
	VerifiedAt:            "verified_at",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var VerificationRequestResponseTableColumns = struct {
	ID                    string
	VerificationRequestID string
	Message               string
	MediaData             string
	VerifiedAt            string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "verification_request_responses.id",
	VerificationRequestID: "verification_request_responses.verification_request_id",
	Message:               "verification_request_responses.message",
	MediaData:             "verification_request_responses.media_data",
	VerifiedAt:            "verification_request_responses.verified_at",
	CreatedAt:             "verification_request_responses.created_at",
	UpdatedAt:             "verification_request_responses.updated_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VerificationRequestResponseWhere = struct {
	ID                    whereHelperint64
	VerificationRequestID whereHelperint64
	Message               whereHelperstring
	MediaData             whereHelpernull_JSON
	VerifiedAt            whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint64{field: "\"verification_request_responses\".\"id\""},
	VerificationRequestID: whereHelperint64{field: "\"verification_request_responses\".\"verification_request_id\""},
	Message:               whereHelperstring{field: "\"verification_request_responses\".\"message\""},
	MediaData:             whereHelpernull_JSON{field: "\"verification_request_responses\".\"media_data\""},
	VerifiedAt:            whereHelpertime_Time{field: "\"verification_request_responses\".\"verified_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"verification_request_responses\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"verification_request_responses\".\"updated_at\""},
}

// VerificationRequestResponseRels is where relationship names are stored.
var VerificationRequestResponseRels = struct {
	VerificationRequest string
}{
	VerificationRequest: "VerificationRequest",
}

// verificationRequestResponseR is where relationships are stored.
type verificationRequestResponseR struct {
	VerificationRequest *VerificationRequest `boil:"VerificationRequest" json:"VerificationRequest" toml:"VerificationRequest" yaml:"VerificationRequest"`
}

// NewStruct creates a new relationship struct
func (*verificationRequestResponseR) NewStruct() *verificationRequestResponseR {
	return &verificationRequestResponseR{}
}

func (r *verificationRequestResponseR) GetVerificationRequest() *VerificationRequest {
	if r == nil {
		return nil
	}
	return r.VerificationRequest
}

// verificationRequestResponseL is where Load methods for each relationship are stored.
type verificationRequestResponseL struct{}

var (
	verificationRequestResponseAllColumns            = []string{"id", "verification_request_id", "message", "media_data", "verified_at", "created_at", "updated_at"}
	verificationRequestResponseColumnsWithoutDefault = []string{"id", "verification_request_id", "message", "verified_at"}
	verificationRequestResponseColumnsWithDefault    = []string{"media_data", "created_at", "updated_at"}
	verificationRequestResponsePrimaryKeyColumns     = []string{"id"}
	verificationRequestResponseGeneratedColumns      = []string{}
)

type (
	// VerificationRequestResponseSlice is an alias for a slice of pointers to VerificationRequestResponse.
	// This should almost always be used instead of []VerificationRequestResponse.
	VerificationRequestResponseSlice []*VerificationRequestResponse

	verificationRequestResponseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	verificationRequestResponseType                 = reflect.TypeOf(&VerificationRequestResponse{})
	verificationRequestResponseMapping              = queries.MakeStructMapping(verificationRequestResponseType)
	verificationRequestResponsePrimaryKeyMapping, _ = queries.BindMapping(verificationRequestResponseType, verificationRequestResponseMapping, verificationRequestResponsePrimaryKeyColumns)
	verificationRequestResponseInsertCacheMut       sync.RWMutex
	verificationRequestResponseInsertCache          = make(map[string]insertCache)
	verificationRequestResponseUpdateCacheMut       sync.RWMutex
	verificationRequestResponseUpdateCache          = make(map[string]updateCache)
	verificationRequestResponseUpsertCacheMut       sync.RWMutex
	verificationRequestResponseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single verificationRequestResponse record from the query.
func (q verificationRequestResponseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VerificationRequestResponse, error) {
	o := &VerificationRequestResponse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for verification_request_responses")
	}

	return o, nil
}

// All returns all VerificationRequestResponse records from the query.
func (q verificationRequestResponseQuery) All(ctx context.Context, exec boil.ContextExecutor) (VerificationRequestResponseSlice, error) {
	var o []*VerificationRequestResponse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to VerificationRequestResponse slice")
	}

	return o, nil
}

// Count returns the count of all VerificationRequestResponse records in the query.
func (q verificationRequestResponseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count verification_request_responses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q verificationRequestResponseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if verification_request_responses exists")
	}

	return count > 0, nil
}

// VerificationRequest pointed to by the foreign key.
func (o *VerificationRequestResponse) VerificationRequest(mods ...qm.QueryMod) verificationRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VerificationRequestID),
	}

	queryMods = append(queryMods, mods...)

	return VerificationRequests(queryMods...)
}

// LoadVerificationRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (verificationRequestResponseL) LoadVerificationRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerificationRequestResponse interface{}, mods queries.Applicator) error {
	var slice []*VerificationRequestResponse
	var object *VerificationRequestResponse

	if singular {
		var ok bool
		object, ok = maybeVerificationRequestResponse.(*VerificationRequestResponse)
		if !ok {
			object = new(VerificationRequestResponse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerificationRequestResponse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerificationRequestResponse))
			}
		}
	} else {
		s, ok := maybeVerificationRequestResponse.(*[]*VerificationRequestResponse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerificationRequestResponse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerificationRequestResponse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &verificationRequestResponseR{}
		}
		args = append(args, object.VerificationRequestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verificationRequestResponseR{}
			}

			for _, a := range args {
				if a == obj.VerificationRequestID {
					continue Outer
				}
			}

			args = append(args, obj.VerificationRequestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`verification_requests`),
		qm.WhereIn(`verification_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VerificationRequest")
	}

	var resultSlice []*VerificationRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VerificationRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for verification_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verification_requests")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VerificationRequest = foreign
		if foreign.R == nil {
			foreign.R = &verificationRequestR{}
		}
		foreign.R.VerificationRequestResponses = append(foreign.R.VerificationRequestResponses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VerificationRequestID == foreign.ID {
				local.R.VerificationRequest = foreign
				if foreign.R == nil {
					foreign.R = &verificationRequestR{}
				}
				foreign.R.VerificationRequestResponses = append(foreign.R.VerificationRequestResponses, local)
				break
			}
		}
	}

	return nil
}

// SetVerificationRequest of the verificationRequestResponse to the related item.
// Sets o.R.VerificationRequest to related.
// Adds o to related.R.VerificationRequestResponses.
func (o *VerificationRequestResponse) SetVerificationRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VerificationRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"verification_request_responses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"verification_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, verificationRequestResponsePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VerificationRequestID = related.ID
	if o.R == nil {
		o.R = &verificationRequestResponseR{
			VerificationRequest: related,
		}
	} else {
		o.R.VerificationRequest = related
	}

	if related.R == nil {
		related.R = &verificationRequestR{
			VerificationRequestResponses: VerificationRequestResponseSlice{o},
		}
	} else {
		related.R.VerificationRequestResponses = append(related.R.VerificationRequestResponses, o)
	}

	return nil
}

// VerificationRequestResponses retrieves all the records using an executor.
func VerificationRequestResponses(mods ...qm.QueryMod) verificationRequestResponseQuery {
	mods = append(mods, qm.From("\"verification_request_responses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"verification_request_responses\".*"})
	}

	return verificationRequestResponseQuery{q}
}

// FindVerificationRequestResponse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVerificationRequestResponse(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*VerificationRequestResponse, error) {
	verificationRequestResponseObj := &VerificationRequestResponse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"verification_request_responses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, verificationRequestResponseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from verification_request_responses")
	}

	return verificationRequestResponseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VerificationRequestResponse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no verification_request_responses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(verificationRequestResponseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	verificationRequestResponseInsertCacheMut.RLock()
	cache, cached := verificationRequestResponseInsertCache[key]
	verificationRequestResponseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			verificationRequestResponseAllColumns,
			verificationRequestResponseColumnsWithDefault,
			verificationRequestResponseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(verificationRequestResponseType, verificationRequestResponseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(verificationRequestResponseType, verificationRequestResponseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"verification_request_responses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"verification_request_responses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into verification_request_responses")
	}

	if !cached {
		verificationRequestResponseInsertCacheMut.Lock()
		verificationRequestResponseInsertCache[key] = cache
		verificationRequestResponseInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VerificationRequestResponse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VerificationRequestResponse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	verificationRequestResponseUpdateCacheMut.RLock()
	cache, cached := verificationRequestResponseUpdateCache[key]
	verificationRequestResponseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			verificationRequestResponseAllColumns,
			verificationRequestResponsePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update verification_request_responses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"verification_request_responses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, verificationRequestResponsePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(verificationRequestResponseType, verificationRequestResponseMapping, append(wl, verificationRequestResponsePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update verification_request_responses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for verification_request_responses")
	}

	if !cached {
		verificationRequestResponseUpdateCacheMut.Lock()
		verificationRequestResponseUpdateCache[key] = cache
		verificationRequestResponseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q verificationRequestResponseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for verification_request_responses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for verification_request_responses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VerificationRequestResponseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verificationRequestResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"verification_request_responses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, verificationRequestResponsePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in verificationRequestResponse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all verificationRequestResponse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VerificationRequestResponse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no verification_request_responses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(verificationRequestResponseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	verificationRequestResponseUpsertCacheMut.RLock()
	cache, cached := verificationRequestResponseUpsertCache[key]
	verificationRequestResponseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			verificationRequestResponseAllColumns,
			verificationRequestResponseColumnsWithDefault,
			verificationRequestResponseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			verificationRequestResponseAllColumns,
			verificationRequestResponsePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert verification_request_responses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(verificationRequestResponsePrimaryKeyColumns))
			copy(conflict, verificationRequestResponsePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"verification_request_responses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(verificationRequestResponseType, verificationRequestResponseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(verificationRequestResponseType, verificationRequestResponseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert verification_request_responses")
	}

	if !cached {
		verificationRequestResponseUpsertCacheMut.Lock()
		verificationRequestResponseUpsertCache[key] = cache
		verificationRequestResponseUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VerificationRequestResponse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VerificationRequestResponse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no VerificationRequestResponse provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), verificationRequestResponsePrimaryKeyMapping)
	sql := "DELETE FROM \"verification_request_responses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from verification_request_responses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for verification_request_responses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q verificationRequestResponseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no verificationRequestResponseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from verification_request_responses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for verification_request_responses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VerificationRequestResponseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verificationRequestResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"verification_request_responses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, verificationRequestResponsePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from verificationRequestResponse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for verification_request_responses")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VerificationRequestResponse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVerificationRequestResponse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VerificationRequestResponseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VerificationRequestResponseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verificationRequestResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"verification_request_responses\".* FROM \"verification_request_responses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, verificationRequestResponsePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in VerificationRequestResponseSlice")
	}

	*o = slice

	return nil
}

// VerificationRequestResponseExists checks if the VerificationRequestResponse row exists.
func VerificationRequestResponseExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"verification_request_responses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if verification_request_responses exists")
	}

	return exists, nil
}

// Exists checks if the VerificationRequestResponse row exists.
func (o *VerificationRequestResponse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VerificationRequestResponseExists(ctx, exec, o.ID)
}
