// Code generated by mockery v2.20.0. DO NOT EDIT.

package asset

import (
	context "context"

	model "github.com/nhan1603/CloneScc/api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetAllCCTV provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllCCTV(ctx context.Context) ([]model.CctvData, error) {
	ret := _m.Called(ctx)

	var r0 []model.CctvData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.CctvData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.CctvData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CctvData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCTVKeyByName provides a mock function with given fields: ctx, cctvName
func (_m *MockRepository) GetCCTVKeyByName(ctx context.Context, cctvName string) (int64, error) {
	ret := _m.Called(ctx, cctvName)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, cctvName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, cctvName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cctvName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceToken provides a mock function with given fields: ctx, userID
func (_m *MockRepository) GetDeviceToken(ctx context.Context, userID int64) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: ctx, input
func (_m *MockRepository) GetDevices(ctx context.Context, input GetDevicesInput) ([]model.Devices, int64, error) {
	ret := _m.Called(ctx, input)

	var r0 []model.Devices
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, GetDevicesInput) ([]model.Devices, int64, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetDevicesInput) []model.Devices); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Devices)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetDevicesInput) int64); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, GetDevicesInput) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPremises provides a mock function with given fields: ctx, input
func (_m *MockRepository) GetPremises(ctx context.Context, input GetPremisesInput) ([]model.Premises, error) {
	ret := _m.Called(ctx, input)

	var r0 []model.Premises
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetPremisesInput) ([]model.Premises, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetPremisesInput) []model.Premises); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Premises)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetPremisesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDeviceToken provides a mock function with given fields: ctx, input
func (_m *MockRepository) UpsertDeviceToken(ctx context.Context, input UpsertDeviceTokenInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpsertDeviceTokenInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
