// Code generated by mockery v2.20.0. DO NOT EDIT.

package request

import (
	context "context"

	model "github.com/nhan1603/CloneScc/api/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int64) (model.VerificationRequest, error) {
	ret := _m.Called(ctx, id)

	var r0 model.VerificationRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.VerificationRequest, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.VerificationRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.VerificationRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequest provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetRequest(_a0 context.Context, _a1 int64) (model.RequestDetail, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.RequestDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.RequestDetail, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.RequestDetail); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.RequestDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequests provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetRequests(_a0 context.Context, _a1 model.GetRequestsInput) ([]model.RequestSummary, int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.RequestSummary
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRequestsInput) ([]model.RequestSummary, int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetRequestsInput) []model.RequestSummary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RequestSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetRequestsInput) int64); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.GetRequestsInput) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Insert provides a mock function with given fields: ctx, input
func (_m *MockRepository) Insert(ctx context.Context, input model.VerificationRequest) (model.VerificationRequest, error) {
	ret := _m.Called(ctx, input)

	var r0 model.VerificationRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationRequest) (model.VerificationRequest, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationRequest) model.VerificationRequest); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.VerificationRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.VerificationRequest) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRequestResponses provides a mock function with given fields: ctx, input
func (_m *MockRepository) InsertRequestResponses(ctx context.Context, input model.VerificationRequestResponses) (model.VerificationRequestResponses, error) {
	ret := _m.Called(ctx, input)

	var r0 model.VerificationRequestResponses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationRequestResponses) (model.VerificationRequestResponses, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationRequestResponses) model.VerificationRequestResponses); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.VerificationRequestResponses)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.VerificationRequestResponses) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusAndEndTime provides a mock function with given fields: ctx, reqID, status, endTime
func (_m *MockRepository) UpdateStatusAndEndTime(ctx context.Context, reqID int64, status model.VerificationRequestStatus, endTime time.Time) (model.VerificationRequest, error) {
	ret := _m.Called(ctx, reqID, status, endTime)

	var r0 model.VerificationRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.VerificationRequestStatus, time.Time) (model.VerificationRequest, error)); ok {
		return rf(ctx, reqID, status, endTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.VerificationRequestStatus, time.Time) model.VerificationRequest); ok {
		r0 = rf(ctx, reqID, status, endTime)
	} else {
		r0 = ret.Get(0).(model.VerificationRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, model.VerificationRequestStatus, time.Time) error); ok {
		r1 = rf(ctx, reqID, status, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
